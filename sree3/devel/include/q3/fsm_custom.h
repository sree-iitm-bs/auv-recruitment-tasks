// Generated by gencpp from file q3/fsm_custom.msg
// DO NOT EDIT!


#ifndef Q3_MESSAGE_FSM_CUSTOM_H
#define Q3_MESSAGE_FSM_CUSTOM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/String.h>

namespace q3
{
template <class ContainerAllocator>
struct fsm_custom_
{
  typedef fsm_custom_<ContainerAllocator> Type;

  fsm_custom_()
    : x()
    , y()
    , z()
    , direction()  {
    }
  fsm_custom_(const ContainerAllocator& _alloc)
    : x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , direction(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _x_type;
  _x_type x;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _y_type;
  _y_type y;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _z_type;
  _z_type z;

   typedef  ::std_msgs::String_<ContainerAllocator>  _direction_type;
  _direction_type direction;





  typedef boost::shared_ptr< ::q3::fsm_custom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::q3::fsm_custom_<ContainerAllocator> const> ConstPtr;

}; // struct fsm_custom_

typedef ::q3::fsm_custom_<std::allocator<void> > fsm_custom;

typedef boost::shared_ptr< ::q3::fsm_custom > fsm_customPtr;
typedef boost::shared_ptr< ::q3::fsm_custom const> fsm_customConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::q3::fsm_custom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::q3::fsm_custom_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::q3::fsm_custom_<ContainerAllocator1> & lhs, const ::q3::fsm_custom_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.direction == rhs.direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::q3::fsm_custom_<ContainerAllocator1> & lhs, const ::q3::fsm_custom_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace q3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::q3::fsm_custom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::q3::fsm_custom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::q3::fsm_custom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::q3::fsm_custom_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::q3::fsm_custom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::q3::fsm_custom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::q3::fsm_custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f272c4a41ba10e634ae3cc108268d35";
  }

  static const char* value(const ::q3::fsm_custom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f272c4a41ba10e6ULL;
  static const uint64_t static_value2 = 0x34ae3cc108268d35ULL;
};

template<class ContainerAllocator>
struct DataType< ::q3::fsm_custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "q3/fsm_custom";
  }

  static const char* value(const ::q3::fsm_custom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::q3::fsm_custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 x\n"
"std_msgs/Float64 y\n"
"std_msgs/Float64 z\n"
"std_msgs/String direction\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::q3::fsm_custom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::q3::fsm_custom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fsm_custom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::q3::fsm_custom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::q3::fsm_custom_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.z);
    s << indent << "direction: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // Q3_MESSAGE_FSM_CUSTOM_H
